<project xmlns:ivy="antlib:org.apache.ivy.ant" name="luceneutil" basedir="." default="" xmlns:if="ant:if"
         xmlns:unless="ant:unless">

    <property file="build.properties"/>

    <property name="lucene.jars" value="${lucene.checkout}/lucene"/>

    <property name="src.dir" value="src/main"/>
    <property name="test.src.dir" value="src/test/java"/>

    <property name="build.dir" value="target"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    <property name="jar.dir" value="${build.dir}/jar"/>

    <property name="test.classes.dir" value="${build.dir}/test-classes"/>
    <property name="test.jar.dir" value="${build.dir}/test-jar"/>

    <property name="lib.dir" value="libs"/>
    <property name="main.lib.dir" value="${lib.dir}/main"/>
    <property name="test.lib.dir" value="${lib.dir}/test"/>

    <path id="lib.path">
        <fileset dir="${main.lib.dir}" includes="**/*.jar"/>
        <fileset dir="${lucene.jars}" includes="**/*.jar"/>
    </path>

    <path id="app.classpath">
        <dirset dir="${classes.dir}">
        </dirset>
    </path>

    <path id="app.path">
        <path refid="lib.path" />
        <path refid="app.classpath" />
    </path>

    <path id="test.path">
        <path refid="test.classpath" />
    </path>

    <path id="build.test.classpath">
        <path refid="lib.path"/>
        <fileset dir="${test.lib.dir}" includes="**/*.jar"/>
        <path refid="app.classpath"/>
    </path>

    <path id="test.classpath">
        <path refid="build.test.classpath"/>
        <path>
            <dirset dir="${test.classes.dir}">
            </dirset>
        </path>
    </path>

<!--    <echo message="classpath: ${toString:lib.path}"/>-->
<!--    <echo message="test.classpath: ${toString:test.classpath}"/>-->
<!--    <echo message="app.test.classpath: ${toString:app.test.classpath}"/>-->

<!--  BEGIN GET IVY on my machine -->
    <property name="ivy.install.version" value="2.5.2"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <import file="./data-build.xml"/>

    <target name="download-ivy" description="Download the ivy jars into ${ivy.jar.dir}">

        <mkdir dir="${ivy.home}"/>
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="bootstrap" depends="init-ivy" />

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
                it into Ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
    </target>
<!-- END GET IVY -->

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile" depends="resolve" description="Compile all java sources in ${src.dir}">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" classpathref="lib.path"/>
    </target>

    <target name="compile-test" depends="compile" description="Compile all test classes in ${test.src.dir}">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeantruntime="false"
               classpathref="test.classpath"/>
    </target>

    <target name="resolve" description="Retrieve dependencies with Ivy into ${lib.dir}">
        <ivy:retrieve  pattern="${lib.dir}/[conf]/[organisation]/[artifact]-[revision].[ext]" sync="true"/>
    </target>

    <target name="run" depends="compile" description="Run any particular java main class. Pass the class name as`-Dmain.class=`
     and any arguments as a doubley quoted string in `-Dargs=`. You can also pass any jvm args in `-DjvmArgs=`">
        <java fork="true" classname="${main.class}">
            <classpath>
                <path refid="app.path"/>
            </classpath>
            <arg line="${args}" if:set="args"/>
            <jvmarg line="${jvmArgs}" if:set="jvmArgs"/>
        </java>
    </target>

    <target name="test" depends="compile-test" description="Run all the Junit tests in ${test.classes.dir}">
        <junit>
            <classpath refid="test.path" />
            <batchtest>
                <fileset dir="${test.classes.dir}">
                    <include name="**/*Test*"/>
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
    </target>

    <target name="test-single" depends="compile-test" description="Run a single test class file. Provide fully classified test class name in `-Dtest.class=`">
        <junit>
            <classpath refid="test.path" />
            <test name="${test.class}" />
            <formatter type="plain" usefile="false"/>
        </junit>
    </target>

    <target name="test-methods" depends="compile-test" description="Run selected test methods of a test class.
    Provide fully classified test class name in `-Dtest.class=`. And comma separated method names in `-Dtest.methods=`" >
        <junit>
            <classpath refid="test.path" />
            <test name="${test.class}" methods="${test.methods}"/>
            <formatter type="plain" usefile="false"/>
        </junit>
    </target>
</project>
